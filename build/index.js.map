{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAExD,MAAM,CAAC,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;AACrE,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,cAAc,EAAE,CAAC;AACzE,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;AACvD,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,SAAiB,EAAE,EAAE,CAAC,mBAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AACrG,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC3F,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AAC3F,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,GAAW,EAAE,SAAiB,EAAE,EAAE,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AACvH,MAAM,CAAC,MAAM,UAAU,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,UAAU,EAAE,CAAC;AACjE,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,SAAiB,EAAE,EAAE,CAAC,mBAAmB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACrG,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;AAC3D,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC3G,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACnH,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAqB,EAAE,CAAC,mBAAmB,CAAC,4BAA4B,EAAE,CAAC;AACvH,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAC;AAC3E,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAe,EAAiB,EAAE,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAGpH,gCAAgC;AAChC,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,IAAkB,EAAE;IACpD,IAAI,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,sBAAsB,EAAE,CAAC;QAClE,OAAO,MAAM,CAAC,CAAE,iEAAiE;IACrF,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,MAAM,KAAK,CAAC;IAChB,CAAC;AACL,CAAC,CAAC;AAEF,sBAAsB;AACtB,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAE,MAAW,EAAiB,EAAE;IAChE,IAAI,CAAC;QACD,MAAM,mBAAmB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,MAAM,KAAK,CAAC;IAChB,CAAC;AACL,CAAC,CAAC","sourcesContent":["import ToneGeneratorModule from \"./ToneGeneratorModule\";\n\nexport const getIsPlaying = () => ToneGeneratorModule.getIsPlaying();\nexport const playWhiteNoise = () => ToneGeneratorModule.playWhiteNoise();\nexport const pause = () => ToneGeneratorModule.pause();\nexport const adjustFrequency = (frequency: number) => ToneGeneratorModule.adjustFrequency(frequency);\nexport const playSoundFromURL = (URL: string) => ToneGeneratorModule.playSoundFromURL(URL);\nexport const stopSoundFromURL = (URL: string) => ToneGeneratorModule.stopSoundFromURL(URL);\nexport const setVolumeForURL = (URL: string, amplitude: number) => ToneGeneratorModule.setVolumeForURL(URL, amplitude);\nexport const performFFT = () => ToneGeneratorModule.performFFT();\nexport const setFrequency = async (frequency: number) => ToneGeneratorModule.setFrequency(frequency);\nexport const stop = async () => ToneGeneratorModule.stop();\nexport const adjustMasterVolume = async (volume: number) => ToneGeneratorModule.adjustMasterVolume(volume);\nexport const adjustWhiteNoiseVolume = async (volume: number) => ToneGeneratorModule.adjustWhiteNoiseVolume(volume);\nexport const checkIfSoundLibraryIsPlaying = (): Promise<boolean> => ToneGeneratorModule.checkIfSoundLibraryIsPlaying();\nexport const saveSoundToFile = () => ToneGeneratorModule.saveSoundToFile();\nexport const playSoundFromFile = (fileURL: string): Promise<void> => ToneGeneratorModule.playSoundFromFile(fileURL);\n\n\n// Save the current sound preset\nexport const saveSoundPreset = async (): Promise<any> => {\n    try {\n        const preset = await ToneGeneratorModule.saveCurrentSoundPreset();\n        return preset;  // Return the preset so it can be stored on the JS side if needed\n    } catch (error) {\n        console.error('Error saving sound preset:', error);\n        throw error;\n    }\n};\n\n// Load a sound preset\nexport const loadSoundPreset = async (preset: any): Promise<void> => {\n    try {\n        await ToneGeneratorModule.loadSoundFromPreset(preset);\n    } catch (error) {\n        console.error('Error loading sound preset:', error);\n        throw error;\n    }\n};\n\n// Define SoundPreset, URLSound, and ADSR data structures\nexport interface URLSound {\n    url: string;       // URL of the sound\n    volume: number;    // Volume of the sound\n}\n\n// Data structure for saving sound presets:\nexport interface SoundPreset {\n    isWhiteNoise: boolean;          // Is white noise playing?\n    frequency?: number;             // Frequency for white noise (optional)\n    volume: number;                 // Volume level of white noise or sound\n    urlSounds: URLSound[];          // Array of URL-based sounds\n    eqFrequency: number;            // Frequency for EQ filters\n}\n"]}